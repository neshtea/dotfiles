#+TITLE: Emacs Configuration
#+AUTHOR: Marco Schneider

* General
  This document describes my Emacs configuration.  It is centered
  around [[https://github.com/emacs-evil/evil][emacs-evil/evil]].  This configuration is intended to be
  located in =$XDG_HOME/emacs/= (which is assumed by some variables
  set later on).
** Packages/Package Management
   All packages I use are managed via [[https://github.com/nix-community/home-manager][nix-community/home-manager]].
   This means that I don't install packages using any Emacs tool.  I
   do, however, configure my packages via [[https://github.com/jwiegley/use-package][jwiegley/use-package]].
** Keybindings
   This For keybindings, I use [[https://github.com/noctuid/general.el][noctuid/general.el]].  It has nice support
   for everything I need and more.

   #+begin_src elisp
     (use-package general)
   #+end_src

   To define keys, I usually use these two =definers=:

   1. =def-with-leader= is used to define /global/ bindings I usually
      want to be able to access in every mode.  It is accessed with the
      =SPC=-prefix.
   2. =def-local-with-leader= is used to define /mode-local/ bindings.
      It is accessed via the =,=-prefix.

   #+begin_src elisp
     (general-create-definer def-with-leader
       :keymaps 'override
       :states '(normal insert emacs visual motion)
       :prefix "SPC"
       :non-normal-prefix "C-SPC")

     (general-create-definer def-local-with-leader
       :keymaps 'override
       :states '(normal insert emacs visual motion)
       :prefix ","
       :non-normal-prefix "C-,")
   #+end_src

   If I want to know which keybindings are available, I just press the
   prefix and [[https://github.com/justbur/emacs-which-key][justbur/emacs-which-key]] shows me possible candidates.
   #+begin_src elisp
     (use-package which-key
       :custom
       (which-key-idle-delay 0.3)  ; Show completions relatively fast.
       :hook (after-init . #'which-key-mode))
   #+end_src
** Basic UI Settings
   We start by removing all the visible clutter from the default UI.
   Also, I don't need the default splash screen.  Highlighting
   matching parens is also always nice.
   #+begin_src elisp
     (setq inhibit-splash-screen t)
     (menu-bar-mode -1)
     (toggle-scroll-bar -1)
     (tool-bar-mode -1)
     (show-paren-mode 1)
   #+end_src

   I'm also not interested error feedback from Emacs itself, so I turn
   this [[https://www.emacswiki.org/emacs/AlarmBell][off completely]].

   #+begin_src elisp
     (setq ring-bell-function 'ignore)
   #+end_src

   When Emacs asks questions, by default, it expects you to answer
   'yes' or 'no'.  [[http://pragmaticemacs.com/emacs/make-all-prompts-y-or-n/][I only want to answer 'y' and 'n']].
   #+begin_src elisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src

   I often switch between two buffers, for which I use this little
   function [[https://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/][I found]]:
   #+begin_src elisp
     (defun er-switch-to-previous-buffer ()
       "Switch to previously open buffer.
     Repeated invocations toggle between the two most recently open buffers."
       (interactive)
       (switch-to-buffer (other-buffer (current-buffer) 1)))
   #+end_src

   Since Emacs behaves weirdly in full-screen modes (it is never clear
   to me if my build supports it natively or not), is use this little
   guy.  It's not the native full screen (on MacOS), but oh well.
   #+begin_src elisp
     (defun toggle-fullscreen ()
       "Toggle full screen."
       (interactive)
       (set-frame-parameter
	nil 'fullscreen
	(when (not (frame-parameter nil 'fullscreen)) 'fullboth)))
   #+end_src
*** Font
    I always use the same font, no ligatures, etc.  So there is
    nothing interesting to see here
    #+begin_src elisp
      (set-frame-font "Iosevka-14" t t)
    #+end_src
*** Themes
    Currenty, I'm happy jumping around different [[https://github.com/doomemacs/themes][doomemacs/themes]].  It
    is nice because they play well with [[https://github.com/hlissner/emacs-solaire-mode][hlissner/emacs-solaire-mode]]
    and [[https://github.com/seagle0128/doom-modeline][seagle0128/doom-modeline]].  =solaire-mode= just uses slight
    variations of a theme (if the theme is supported) to distinguish
    file-buffers from non-file-buffers.  And =doom-modeline= is just a very nice modeline with icons, etc.

    To quickly switch between themes, I shamelessly copied
    [[https://github.com/kenranunderscore/dotfiles][kenranunderscore]]s =switch-theme= function (like most of my
    configurations).
    
    #+begin_src elisp
      ;; https://github.com/kenranunderscore/dotfiles/blob/main/modules/programs/emacs/emacs.d/init.el#L80
      (defun neshtea/switch-theme (name)
	"Switch themes interactively.  Similar to `load-theme' but also
      disables all other enabled themes."
	(interactive
	 (list (intern
		(completing-read
		 "Theme: "
		 (mapcar #'symbol-name
			 (-difference (custom-available-themes)
				      custom-enabled-themes))))))
	(progn
	  (mapcar #'disable-theme
		  custom-enabled-themes)
	  (load-theme name t)))

      ;; Some themes to choose from besides the basic ones.
      (use-package doom-themes
	:defer t
	:init
	;; Make doom-one the default.
	(neshtea/switch-theme 'doom-laserwave))

      ;; Distinguish file-visiting buffers from other ones. Only works with
      ;; doom-themes (and maybe a few others).
      (use-package solaire-mode
	:init
	(solaire-global-mode +1))
    #+end_src
** MacOS
   I can never remember which build of Emacs mixes this up, but
   usually, on the Mac, all modifier keys are swapped around.  This
   fixes that for me
   #+begin_src elisp
     (setq ns-alternate-modifier 'none)
     (setq ns-command-modifier 'meta)
     (setq ns-function-modifier 'super)
   #+end_src
*** Path
    I know that this is a problem on other OSes as well, but on the
    Mac, you will never get the =$PATH= you would expect when running
    a GUI Emacs.  [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]] tries to fix this.  To
    be honest, I never really get it to work, so I leave it at the
    minimally required configuration.  (I sometimes wonder if using
    =fish= makes everything even harder?).  At the very least, I know
    it's very slow but nothing they describe in the README works for
    me, so :shrug-emoji:.

    #+begin_src elisp
      (use-package exec-path-from-shell
	:config
	;; Point to the fish shell installed via home-manager/nix.
	(setenv "SHELL" (expand-file-name "~/.nix-profile/bin/fish"))
	(exec-path-from-shell-initialize)
	(exec-path-from-shell-copy-envs '("PATH")))
    #+end_src
** Avoiding clutter
   By default, Emacs really wants to litter files all over the place.
   I turn off backup files that Emacs wants to generate on save.  I
   also don't want Emacs to put custom variables in the main
   configuration file:

   #+begin_src elisp
     (setq make-backup-files nil)
     (setq custom-file (expand-file-name "~/.config/emacs/custom.el"))
     (load custom-file 'no-error)
   #+end_src

   If there are any errors in the custom file, since 99% of the time I
   don't care, just ignore everything from the custom file.
** General File Behaviour
   There are some basics that I think should be the default: First, I
   always want the current version of a file, not some old version
   that still lives in some buffer (you of course might have other
   needs).  Second, I usually want to come back to where I left from,
   which is achieved by turning [[https://www.emacswiki.org/emacs/SavePlace][=save-place-mode=]] on.
   #+begin_src elisp
     (setq load-prefer-newer t)
     (save-place-mode 1)
   #+end_src
** Evil
   As mentioned above, I am an =evil-mode= user.  For =evil= itself,
   there isn't much to configure, just some packages the do basically
   the right thing out of the box (at least for me).  The only outlier
   is =evil-collection=, which I intended to get rid of for a long
   time because I feel it only makes things worse in many places and
   triggers unexpected behaviour in weird places.

   #+begin_src elisp
	  ;;;;  evil
     ;; Make editing files a little saner (that is, make it behave like
     ;; vim).
     (use-package evil
       :init
       (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
       (setq evil-want-keybinding nil)
       :config
       (evil-mode 1)
       (setq evil-undo-system 'emacs))

     ;; evil-collection contains a large repository of behaviours that make
     ;; lots of buffers behave the way you would expect in evil-mode.
     (use-package evil-collection
       :after (evil)
       :config
       (evil-collection-init))

     ;; Same as evil-collection, but specific to org-mode.
     ;; https://github.com/Somelauw/evil-org-mode
     (use-package evil-org
       :after (evil org)
       :hook (org-mode . evil-org-mode)
       :config
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))

     ;; Make commenting a little easier.
     (use-package evil-nerd-commenter)
   #+end_src

   For code folding, I just can't find a package that makes me happy.
   For now, I use [[https://github.com/gregsexton/origami.el][gregsexton/origami.el]] but I can't say I like it very much.
   #+begin_src elisp
     (use-package origami
       :init
       (global-origami-mode))
   #+end_src
* 
